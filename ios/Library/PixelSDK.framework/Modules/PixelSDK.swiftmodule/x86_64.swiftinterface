// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name PixelSDK
import CoreLocation
import Dispatch
import Foundation
import MapKit
import MobileCoreServices
@_exported import PixelSDK
import Swift
import SystemConfiguration
import UIKit
public enum AFError : Swift.Error {
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case propertyListEncodingFailed(error: Swift.Error)
  }
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNil
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case propertyListSerializationFailed(error: Swift.Error)
  }
  case invalidURL(url: PixelSDK.URLConvertible)
  case parameterEncodingFailed(reason: PixelSDK.AFError.ParameterEncodingFailureReason)
  case multipartEncodingFailed(reason: PixelSDK.AFError.MultipartEncodingFailureReason)
  case responseValidationFailed(reason: PixelSDK.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: PixelSDK.AFError.ResponseSerializationFailureReason)
}
extension AFError {
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
}
extension AFError {
  public var urlConvertible: PixelSDK.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
}
extension AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol ViewPager {
  var title: Swift.String { get }
}
public protocol HKQueueConfirmation {
  func completed(operation: PixelSDK.HKOperation)
}
public protocol ExcutableQueue {
  var queue: Dispatch.DispatchQueue { get }
}
extension ExcutableQueue {
  public func execute(_ closure: @escaping () -> Swift.Void)
  public func executeAfter(_ seconds: Swift.Double, closure: @escaping () -> Swift.Void)
}
public enum HKQueue : PixelSDK.ExcutableQueue {
  case main
  case userInteractive
  case userInitiated
  case utility
  case background
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public static func == (a: PixelSDK.HKQueue, b: PixelSDK.HKQueue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias RequestID = Swift.String
public protocol Requestp {
}
public class TimeoutManager {
  public var interval: PixelSDK.Timeout {
    get
    }
  public var start: Foundation.Date? {
    get
    }
  public var aliveTime: Foundation.TimeInterval? {
    get
  }
  public var hasTimedout: Swift.Bool
  @objc deinit
}
extension CLLocationManager {
  public var headingState: PixelSDK.HeadingServiceState {
    get
  }
  public static var hasBackgroundCapabilities: Swift.Bool {
    get
  }
  public static var authorizationLevelFromInfoPlist: PixelSDK.AuthorizationLevel {
    get
  }
  public static func validateInfoPlistRequiredKeys(forLevel level: PixelSDK.AuthorizationLevel) -> Swift.Bool
  public func requestAuthorization(level: PixelSDK.AuthorizationLevel)
  public var serviceState: PixelSDK.ServiceState {
    get
  }
  public var servicesAreAvailable: Swift.Bool {
    get
  }
}
public enum Accuracy : Swift.Int, Swift.Equatable, Swift.Comparable, Swift.CustomStringConvertible {
  case any
  case city
  case neighborhood
  case block
  case house
  case room
  public init(_ accuracy: CoreLocation.CLLocationAccuracy)
  public var threshold: CoreLocation.CLLocationAccuracy {
    get
  }
  public var timeStaleThreshold: Foundation.TimeInterval {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: PixelSDK.Accuracy, rhs: PixelSDK.Accuracy) -> Swift.Bool
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum Timeout {
  case after(Foundation.TimeInterval)
  case delayed(Foundation.TimeInterval)
  public var shouldBeDelayed: Swift.Bool {
    get
  }
}
public enum ServiceState {
  case available
  case notDetermined
  case denied
  case restricted
  case disabled
  public static func == (a: PixelSDK.ServiceState, b: PixelSDK.ServiceState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum AuthorizationLevel {
  case always
  case whenInUse
  public static func == (a: PixelSDK.AuthorizationLevel, b: PixelSDK.AuthorizationLevel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum LocationError : Swift.Error {
  case timedout
  case notDetermined
  case denied
  case restricted
  case disabled
  case error
  case other(Swift.String)
  case dataParserError
  case missingAPIKey(forService: Swift.String)
  case failedToObtainData
}
public enum HeadingServiceState {
  case available
  case unavailable
  case invalid
  public static func == (a: PixelSDK.HeadingServiceState, b: PixelSDK.HeadingServiceState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class JSONOperation {
  public var onSuccess: ((PixelSDK.JSON) -> (Swift.Void))?
  public var onFailure: ((PixelSDK.LocationError) -> (Swift.Void))?
  public init(_ url: Foundation.URL, timeout: Foundation.TimeInterval? = nil)
  public func execute()
  public func cancel()
  @objc deinit
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension String : PixelSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension URL : PixelSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension URLComponents : PixelSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension URLRequest : PixelSDK.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension URLRequest {
  public init(url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod, headers: PixelSDK.HTTPHeaders? = nil) throws
}
@discardableResult
public func request(_ url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .get, parameters: PixelSDK.Parameters? = nil, encoding: PixelSDK.ParameterEncoding = URLEncoding.default, headers: PixelSDK.HTTPHeaders? = nil) -> PixelSDK.DataRequest
@discardableResult
public func request(_ urlRequest: PixelSDK.URLRequestConvertible) -> PixelSDK.DataRequest
@discardableResult
public func download(_ url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .get, parameters: PixelSDK.Parameters? = nil, encoding: PixelSDK.ParameterEncoding = URLEncoding.default, headers: PixelSDK.HTTPHeaders? = nil, to destination: PixelSDK.DownloadRequest.DownloadFileDestination? = nil) -> PixelSDK.DownloadRequest
@discardableResult
public func download(_ urlRequest: PixelSDK.URLRequestConvertible, to destination: PixelSDK.DownloadRequest.DownloadFileDestination? = nil) -> PixelSDK.DownloadRequest
@discardableResult
public func download(resumingWith resumeData: Foundation.Data, to destination: PixelSDK.DownloadRequest.DownloadFileDestination? = nil) -> PixelSDK.DownloadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, to url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .post, headers: PixelSDK.HTTPHeaders? = nil) -> PixelSDK.UploadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, with urlRequest: PixelSDK.URLRequestConvertible) -> PixelSDK.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, to url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .post, headers: PixelSDK.HTTPHeaders? = nil) -> PixelSDK.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, with urlRequest: PixelSDK.URLRequestConvertible) -> PixelSDK.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, to url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .post, headers: PixelSDK.HTTPHeaders? = nil) -> PixelSDK.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, with urlRequest: PixelSDK.URLRequestConvertible) -> PixelSDK.UploadRequest
public func upload(multipartFormData: @escaping (PixelSDK.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .post, headers: PixelSDK.HTTPHeaders? = nil, encodingCompletion: ((PixelSDK.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
public func upload(multipartFormData: @escaping (PixelSDK.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: PixelSDK.URLRequestConvertible, encodingCompletion: ((PixelSDK.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
@available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
@discardableResult
public func stream(withHostName hostName: Swift.String, port: Swift.Int) -> PixelSDK.StreamRequest
@available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
@discardableResult
public func stream(with netService: Foundation.NetService) -> PixelSDK.StreamRequest
public class HeadingRequest : PixelSDK.Requestp, Swift.Equatable, Swift.Hashable {
  public typealias AccuracyDegree = CoreLocation.CLLocationDirection
  public typealias Success = ((CoreLocation.CLHeading) -> (Swift.Void))
  public typealias Failure = ((PixelSDK.HeadingServiceState) -> (Swift.Void))
  public var id: PixelSDK.RequestID {
    get
    }
  public var heading: CoreLocation.CLHeading? {
    get
    }
  public var minimumAccuracy: PixelSDK.HeadingRequest.AccuracyDegree? {
    get
    }
  public var minimumInterval: Foundation.TimeInterval? {
    get
    }
  public static func == (lhs: PixelSDK.HeadingRequest, rhs: PixelSDK.HeadingRequest) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func stop()
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
extension NSMutableURLRequest : PixelSDK.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
@objc open class HKOperation : Foundation.Operation {
  public static var delegate: PixelSDK.HKMulticastDelegate<PixelSDK.HKQueueConfirmation>
  @objc override dynamic open var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  open func completeOperation()
  @objc override dynamic open func start()
  @objc override dynamic public init()
  @objc deinit
}
extension Tracker {
  @objc dynamic public func track(sender: Any, eventAction: PixelSDK.EventAction, controller: UIKit.UIViewController, characterKey: Swift.String = "", addGeo: Swift.Bool)
  @objc dynamic public func trackViews(freindlyN: Swift.String, ObjRef: Any, ViewRef: Any, controller: UIKit.UIViewController, addGeo: Swift.Bool)
  @objc dynamic public func identify(email: Swift.String, controller: UIKit.UIViewController, addGeo: Swift.Bool)
  @objc dynamic public func trackCustom(category: Swift.String, action: Swift.String = "", lable: Swift.String = "", controller: UIKit.UIViewController, addGeo: Swift.Bool)
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: PixelSDK.URLRequestConvertible, with parameters: PixelSDK.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : PixelSDK.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: PixelSDK.URLEncoding.Destination, b: PixelSDK.URLEncoding.Destination) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: PixelSDK.URLEncoding.ArrayEncoding, b: PixelSDK.URLEncoding.ArrayEncoding) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: PixelSDK.URLEncoding.BoolEncoding, b: PixelSDK.URLEncoding.BoolEncoding) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static var `default`: PixelSDK.URLEncoding {
    get
  }
  public static var methodDependent: PixelSDK.URLEncoding {
    get
  }
  public static var queryString: PixelSDK.URLEncoding {
    get
  }
  public static var httpBody: PixelSDK.URLEncoding {
    get
  }
  public let destination: PixelSDK.URLEncoding.Destination
  public let arrayEncoding: PixelSDK.URLEncoding.ArrayEncoding
  public let boolEncoding: PixelSDK.URLEncoding.BoolEncoding
  public init(destination: PixelSDK.URLEncoding.Destination = .methodDependent, arrayEncoding: PixelSDK.URLEncoding.ArrayEncoding = .brackets, boolEncoding: PixelSDK.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: PixelSDK.URLRequestConvertible, with parameters: PixelSDK.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : PixelSDK.ParameterEncoding {
  public static var `default`: PixelSDK.JSONEncoding {
    get
  }
  public static var prettyPrinted: PixelSDK.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: PixelSDK.URLRequestConvertible, with parameters: PixelSDK.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: PixelSDK.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct PropertyListEncoding : PixelSDK.ParameterEncoding {
  public static var `default`: PixelSDK.PropertyListEncoding {
    get
  }
  public static var xml: PixelSDK.PropertyListEncoding {
    get
  }
  public static var binary: PixelSDK.PropertyListEncoding {
    get
  }
  public let format: Foundation.PropertyListSerialization.PropertyListFormat
  public let options: Foundation.PropertyListSerialization.WriteOptions
  public init(format: Foundation.PropertyListSerialization.PropertyListFormat = .xml, options: Foundation.PropertyListSerialization.WriteOptions = 0)
  public func encode(_ urlRequest: PixelSDK.URLRequestConvertible, with parameters: PixelSDK.Parameters?) throws -> Foundation.URLRequest
}
extension UIDevice {
  public var hk_deviceUUID: Swift.String {
    get
  }
}
extension Dictionary {
  public func hk_removeNilFromDict(_ dict: inout Swift.Dictionary<ObjectiveC.NSObject, Swift.AnyObject?>) -> Swift.Dictionary<ObjectiveC.NSObject, Swift.AnyObject?>
  public var hk_toJsonString: Swift.String? {
    get
  }
}
extension Array {
  public var hk_toJsonString: Swift.String? {
    get
  }
}
public class HKDevice {
  public static var appname: Swift.String
  public static var version: Swift.String
  public static var device_id: Swift.String
  public static var device_deviceLocalizedModel: Swift.String
  public static var device_name: Swift.String
  public static var device_model: Swift.String
  public static var device_system_version: Swift.String
  public static var device_system_name: Swift.String
  public static var device_platform: Swift.String
  public static var device_os: Swift.String
  public static var current_appname: Swift.String
  public static var current_appversion: Swift.String
  @objc deinit
}
open class ServerTrustPolicyManager {
  final public let policies: [Swift.String : PixelSDK.ServerTrustPolicy]
  public init(policies: [Swift.String : PixelSDK.ServerTrustPolicy])
  open func serverTrustPolicy(forHost host: Swift.String) -> PixelSDK.ServerTrustPolicy?
  @objc deinit
}
public enum ServerTrustPolicy {
  case performDefaultEvaluation(validateHost: Swift.Bool)
  case performRevokedEvaluation(validateHost: Swift.Bool, revocationFlags: CoreFoundation.CFOptionFlags)
  case pinCertificates(certificates: [Security.SecCertificate], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case pinPublicKeys(publicKeys: [Security.SecKey], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case disableEvaluation
  case customEvaluation((Security.SecTrust, Swift.String) -> Swift.Bool)
  public static func certificates(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecCertificate]
  public static func publicKeys(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecKey]
  public func evaluate(_ serverTrust: Security.SecTrust, forHost host: Swift.String) -> Swift.Bool
}
open class HKMulticastDelegate<T> {
  public func add(delegate: T)
  public func remove(delegate: T)
  public func invoke(invocation: (T) -> Swift.Void)
  @objc deinit
}
public func += <T>(left: PixelSDK.HKMulticastDelegate<T>, right: T) where T : AnyObject
public func -= <T>(left: PixelSDK.HKMulticastDelegate<T>, right: T) where T : AnyObject
public class LocationRequest : PixelSDK.Requestp, Swift.Equatable, Swift.Hashable {
  public typealias Success = ((CoreLocation.CLLocation) -> (Swift.Void))
  public typealias Failure = ((PixelSDK.LocationError, CoreLocation.CLLocation?) -> (Swift.Void))
  public enum Mode {
    case oneshot
    case continous
    case significant
    public static func == (a: PixelSDK.LocationRequest.Mode, b: PixelSDK.LocationRequest.Mode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var location: CoreLocation.CLLocation? {
    get
    }
  public var mode: PixelSDK.LocationRequest.Mode {
    get
    }
  public var id: PixelSDK.RequestID {
    get
    }
  public var accuracy: PixelSDK.Accuracy {
    get
    }
  public var timeout: PixelSDK.TimeoutManager? {
    get
    }
  public var timeoutInterval: Foundation.TimeInterval? {
    get
  }
  public var isRecurring: Swift.Bool {
    get
  }
  public func timeout(_ timeout: PixelSDK.Timeout?) -> Self
  public func stop()
  public static func == (lhs: PixelSDK.LocationRequest, rhs: PixelSDK.LocationRequest) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public enum CallType {
  case attribution
  case events
  public static func == (a: PixelSDK.CallType, b: PixelSDK.CallType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum APIWebserviceURL {
  case rest(PixelSDK.CallType)
  public var baseURL: Swift.String {
    get
  }
  public var baseURLwithVersion: Swift.String {
    get
  }
  public var host: Swift.String {
    get
  }
}
public struct DefaultDataResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let error: Swift.Error?
  public let timeline: PixelSDK.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?, timeline: PixelSDK.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DataResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let result: PixelSDK.Result<Value>
  public let timeline: PixelSDK.Timeline
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, result: PixelSDK.Result<Value>, timeline: PixelSDK.Timeline = Timeline())
}
extension DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension DataResponse {
  public func map<T>(_ transform: (Value) -> T) -> PixelSDK.DataResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> PixelSDK.DataResponse<T>
  public func mapError<E>(_ transform: (Swift.Error) -> E) -> PixelSDK.DataResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (Swift.Error) throws -> E) -> PixelSDK.DataResponse<Value> where E : Swift.Error
}
public struct DefaultDownloadResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let error: Swift.Error?
  public let timeline: PixelSDK.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, error: Swift.Error?, timeline: PixelSDK.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DownloadResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let result: PixelSDK.Result<Value>
  public let timeline: PixelSDK.Timeline
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, result: PixelSDK.Result<Value>, timeline: PixelSDK.Timeline = Timeline())
}
extension DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension DownloadResponse {
  public func map<T>(_ transform: (Value) -> T) -> PixelSDK.DownloadResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> PixelSDK.DownloadResponse<T>
  public func mapError<E>(_ transform: (Swift.Error) -> E) -> PixelSDK.DownloadResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (Swift.Error) throws -> E) -> PixelSDK.DownloadResponse<Value> where E : Swift.Error
}
@available(iOS 10.0, OSX 10.12, tvOS 10.0, *)
extension DefaultDataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, OSX 10.12, tvOS 10.0, *)
extension DataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, OSX 10.12, tvOS 10.0, *)
extension DefaultDownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, OSX 10.12, tvOS 10.0, *)
extension DownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
open class APIResponseData {
  @objc deinit
}
public struct Timeline {
  public let requestStartTime: CoreFoundation.CFAbsoluteTime
  public let initialResponseTime: CoreFoundation.CFAbsoluteTime
  public let requestCompletedTime: CoreFoundation.CFAbsoluteTime
  public let serializationCompletedTime: CoreFoundation.CFAbsoluteTime
  public let latency: Foundation.TimeInterval
  public let requestDuration: Foundation.TimeInterval
  public let serializationDuration: Foundation.TimeInterval
  public let totalDuration: Foundation.TimeInterval
  public init(requestStartTime: CoreFoundation.CFAbsoluteTime = 0.0, initialResponseTime: CoreFoundation.CFAbsoluteTime = 0.0, requestCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0, serializationCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0)
}
extension Timeline : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Timeline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
open class SessionManager {
  public enum MultipartFormDataEncodingResult {
    case success(request: PixelSDK.UploadRequest, streamingFromDisk: Swift.Bool, streamFileURL: Foundation.URL?)
    case failure(Swift.Error)
  }
  public static var `default`: PixelSDK.SessionManager
  public static var defaultHTTPHeaders: PixelSDK.HTTPHeaders
  public static var multipartFormDataEncodingMemoryThreshold: Swift.UInt64
  final public let session: Foundation.URLSession
  final public let delegate: PixelSDK.SessionDelegate
  open var startRequestsImmediately: Swift.Bool
  open var adapter: PixelSDK.RequestAdapter?
  open var retrier: PixelSDK.RequestRetrier? {
    get
    set(newValue)
  }
  open var backgroundCompletionHandler: (() -> Swift.Void)?
  public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: PixelSDK.SessionDelegate = SessionDelegate(), serverTrustPolicyManager: PixelSDK.ServerTrustPolicyManager? = nil)
  public init?(session: Foundation.URLSession, delegate: PixelSDK.SessionDelegate, serverTrustPolicyManager: PixelSDK.ServerTrustPolicyManager? = nil)
  @objc deinit
  @discardableResult
  open func request(_ url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .get, parameters: PixelSDK.Parameters? = nil, encoding: PixelSDK.ParameterEncoding = URLEncoding.default, headers: PixelSDK.HTTPHeaders? = nil) -> PixelSDK.DataRequest
  @discardableResult
  open func request(_ urlRequest: PixelSDK.URLRequestConvertible) -> PixelSDK.DataRequest
  @discardableResult
  open func download(_ url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .get, parameters: PixelSDK.Parameters? = nil, encoding: PixelSDK.ParameterEncoding = URLEncoding.default, headers: PixelSDK.HTTPHeaders? = nil, to destination: PixelSDK.DownloadRequest.DownloadFileDestination? = nil) -> PixelSDK.DownloadRequest
  @discardableResult
  open func download(_ urlRequest: PixelSDK.URLRequestConvertible, to destination: PixelSDK.DownloadRequest.DownloadFileDestination? = nil) -> PixelSDK.DownloadRequest
  @discardableResult
  open func download(resumingWith resumeData: Foundation.Data, to destination: PixelSDK.DownloadRequest.DownloadFileDestination? = nil) -> PixelSDK.DownloadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, to url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .post, headers: PixelSDK.HTTPHeaders? = nil) -> PixelSDK.UploadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, with urlRequest: PixelSDK.URLRequestConvertible) -> PixelSDK.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, to url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .post, headers: PixelSDK.HTTPHeaders? = nil) -> PixelSDK.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, with urlRequest: PixelSDK.URLRequestConvertible) -> PixelSDK.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, to url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .post, headers: PixelSDK.HTTPHeaders? = nil) -> PixelSDK.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, with urlRequest: PixelSDK.URLRequestConvertible) -> PixelSDK.UploadRequest
  open func upload(multipartFormData: @escaping (PixelSDK.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: PixelSDK.URLConvertible, method: PixelSDK.HTTPMethod = .post, headers: PixelSDK.HTTPHeaders? = nil, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((PixelSDK.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  open func upload(multipartFormData: @escaping (PixelSDK.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: PixelSDK.URLRequestConvertible, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((PixelSDK.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  @available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(withHostName hostName: Swift.String, port: Swift.Int) -> PixelSDK.StreamRequest
  @available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(with netService: Foundation.NetService) -> PixelSDK.StreamRequest
}
extension Request {
  public enum ValidationResult {
    case success
    case failure(Swift.Error)
  }
}
extension DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> PixelSDK.Request.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping PixelSDK.DataRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension DownloadRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, Foundation.URL?) -> PixelSDK.Request.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping PixelSDK.DownloadRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public typealias RequestRetryCompletion = (Swift.Bool, Foundation.TimeInterval) -> Swift.Void
public protocol RequestRetrier {
  func should(_ manager: PixelSDK.SessionManager, retry request: PixelSDK.Request, with error: Swift.Error, completion: @escaping PixelSDK.RequestRetryCompletion)
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
open class Request {
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  open var delegate: PixelSDK.TaskDelegate {
    get
  }
  open var task: Foundation.URLSessionTask? {
    get
  }
  final public let session: Foundation.URLSession
  open var request: Foundation.URLRequest? {
    get
  }
  open var response: Foundation.HTTPURLResponse? {
    get
  }
  open var retryCount: Swift.UInt {
    get
    }
  @discardableResult
  open func authenticate(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  open func authenticate(usingCredential credential: Foundation.URLCredential) -> Self
  open class func authorizationHeader(user: Swift.String, password: Swift.String) -> (key: Swift.String, value: Swift.String)?
  open func resume()
  open func suspend()
  open func cancel()
  @objc deinit
}
extension Request : Swift.CustomStringConvertible {
  open var description: Swift.String {
    get
  }
}
extension Request : Swift.CustomDebugStringConvertible {
  open var debugDescription: Swift.String {
    get
  }
}
open class DataRequest : PixelSDK.Request {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  @discardableResult
  open func stream(closure: ((Foundation.Data) -> Swift.Void)? = nil) -> Self
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping PixelSDK.DataRequest.ProgressHandler) -> Self
  @objc deinit
}
open class DownloadRequest : PixelSDK.Request {
  public struct DownloadOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt
    public static var createIntermediateDirectories: PixelSDK.DownloadRequest.DownloadOptions
    public static var removePreviousFile: PixelSDK.DownloadRequest.DownloadOptions
    public init(rawValue: Swift.UInt)
    public typealias Element = PixelSDK.DownloadRequest.DownloadOptions
    public typealias ArrayLiteralElement = PixelSDK.DownloadRequest.DownloadOptions
    public typealias RawValue = Swift.UInt
  }
  public typealias DownloadFileDestination = (Foundation.URL, Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: PixelSDK.DownloadRequest.DownloadOptions)
  override open var request: Foundation.URLRequest? {
    get
  }
  open var resumeData: Foundation.Data? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  override open func cancel()
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping PixelSDK.DownloadRequest.ProgressHandler) -> Self
  open class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask) -> PixelSDK.DownloadRequest.DownloadFileDestination
  @objc deinit
}
open class UploadRequest : PixelSDK.DataRequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var uploadProgress: Foundation.Progress {
    get
  }
  @discardableResult
  open func uploadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping PixelSDK.UploadRequest.ProgressHandler) -> Self
  @objc deinit
}
@available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
open class StreamRequest : PixelSDK.Request {
  @objc deinit
}
@objc open class APIResponseHandler : ObjectiveC.NSObject {
  public init(dictionary: [Swift.String : Any?], responseraw: Foundation.HTTPURLResponse?)
  @objc override dynamic public init()
  @objc deinit
}
open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(PixelSDK.NetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: PixelSDK.NetworkReachabilityManager.ConnectionType, b: PixelSDK.NetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public typealias Listener = (PixelSDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: PixelSDK.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: PixelSDK.NetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  public convenience init?(host: Swift.String)
  public convenience init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: PixelSDK.NetworkReachabilityManager.NetworkReachabilityStatus, rhs: PixelSDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
extension NSNotification.Name {
  public struct Task {
    public static var DidResume: Foundation.Notification.Name
    public static var DidSuspend: Foundation.Notification.Name
    public static var DidCancel: Foundation.Notification.Name
    public static var DidComplete: Foundation.Notification.Name
  }
}
extension Notification {
  public struct Key {
    public static var Task: Swift.String
    public static var ResponseData: Swift.String
  }
}
public var Locator: PixelSDK.LocatorManager
@objc public class LocatorManager : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public class Events {
    public typealias Token = Swift.UInt64
    public typealias AuthorizationDidChangeEvent = ((CoreLocation.CLAuthorizationStatus) -> (Swift.Void))
    public func listen(forAuthChanges callback: @escaping PixelSDK.LocatorManager.Events.AuthorizationDidChangeEvent) -> PixelSDK.LocatorManager.Events.Token
    @discardableResult
    public func remove(token: PixelSDK.LocatorManager.Events.Token) -> Swift.Bool
    public func removeAll()
    @objc deinit
  }
  public var events: PixelSDK.LocatorManager.Events {
    get
    }
  public var isUpdatingLocation: Swift.Bool {
    get
    }
  public var isUpdatingHeading: Swift.Bool {
    get
    }
  public var isMonitoringSignificantLocationChanges: Swift.Bool {
    get
    }
  public var backgroundLocationUpdates: Swift.Bool {
    get
    set(newValue)
  }
  public var authorizationStatus: CoreLocation.CLAuthorizationStatus {
    get
  }
  public var currentLocation: CoreLocation.CLLocation? {
    get
  }
  public var currentHeading: CoreLocation.CLHeading? {
    get
    }
  public var updateFailed: Swift.Bool {
    get
    }
  public var state: PixelSDK.ServiceState {
    get
  }
  public var accuracy: PixelSDK.Accuracy {
    get
  }
  @discardableResult
  public func currentPosition(accuracy: PixelSDK.Accuracy, timeout: PixelSDK.Timeout? = nil, onSuccess: @escaping PixelSDK.LocationRequest.Success, onFail: @escaping PixelSDK.LocationRequest.Failure) -> PixelSDK.LocationRequest
  @discardableResult
  public func subscribePosition(accuracy: PixelSDK.Accuracy, onUpdate: @escaping PixelSDK.LocationRequest.Success, onFail: @escaping PixelSDK.LocationRequest.Failure) -> PixelSDK.LocationRequest
  @discardableResult
  public func subscribeSignificantLocations(onUpdate: @escaping PixelSDK.LocationRequest.Success, onFail: @escaping PixelSDK.LocationRequest.Failure) -> PixelSDK.LocationRequest
  @discardableResult
  public func subscribeHeadingUpdates(accuracy: PixelSDK.HeadingRequest.AccuracyDegree?, minInterval: Foundation.TimeInterval? = nil, onUpdate: @escaping PixelSDK.HeadingRequest.Success, onFail: @escaping PixelSDK.HeadingRequest.Failure) -> PixelSDK.HeadingRequest
  @discardableResult
  public func stopRequest(_ request: PixelSDK.Requestp) -> Swift.Bool
  public func requestAuthorizationIfNeeded(_ type: PixelSDK.AuthorizationLevel? = nil)
  public func completeAllLocationRequests()
  public func completeLocationRequest(_ request: PixelSDK.LocationRequest?)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateHeading newHeading: CoreLocation.CLHeading)
  @objc deinit
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var sessionDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var sessionDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var sessionDidFinishEventsForBackgroundURLSession: ((Foundation.URLSession) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Foundation.URLRequest?)?
  open var taskWillPerformHTTPRedirectionWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var taskDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Foundation.InputStream?)?
  open var taskNeedNewBodyStreamWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, @escaping (Foundation.InputStream?) -> Swift.Void) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Foundation.URLSession.ResponseDisposition)?
  open var dataTaskDidReceiveResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse, @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void) -> Swift.Void)?
  open var dataTaskDidBecomeDownloadTask: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLSessionDownloadTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)?
  open var dataTaskWillCacheResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse, @escaping (Foundation.CachedURLResponse?) -> Swift.Void) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  @available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
  open var streamTaskReadClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set(newValue)
  }
  @available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
  open var streamTaskWriteClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set(newValue)
  }
  @available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
  open var streamTaskBetterRouteDiscovered: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set(newValue)
  }
  @available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
  open var streamTaskDidBecomeInputAndOutputStreams: ((Foundation.URLSession, Foundation.URLSessionStreamTask, Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? {
    get
    set(newValue)
  }
  open subscript(task: Foundation.URLSessionTask) -> PixelSDK.Request? {
    get
    set(newValue)
  }
  @objc override dynamic public init()
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector) -> Swift.Bool
  @objc deinit
}
extension SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
extension SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @available(iOS 10.0, OSX 10.12, tvOS 10.0, *)
  @objc(URLSession:task:didFinishCollectingMetrics:) dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
}
extension SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
}
@available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
extension SessionDelegate : Foundation.URLSessionStreamDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, readClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, writeClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, betterRouteDiscoveredFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, streamTask: Foundation.URLSessionStreamTask, didBecome inputStream: Foundation.InputStream, outputStream: Foundation.OutputStream)
}
@objc public enum EventAction : Swift.Int {
  case onClick = 1
  case onLongPress
  case editingDidBegin
  case editingChanged
  case editingDidEnd
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol TrackerDelegate {
  @objc func displayHandler(result: Swift.String)
}
@objc public class Tracker : ObjectiveC.NSObject {
  @objc weak public var delegate: PixelSDK.TrackerDelegate?
  @objc open class var shared: PixelSDK.Tracker {
    @objc get
  }
  @objc public func exceptionHandlerCall(code: Swift.String) throws
  @objc public func setAPIKey(_ apiKey: Swift.String, showLog: Swift.Bool = false, addGeo: Swift.Bool = false, sendBatch: Foundation.TimeInterval = 60, waitForResponse: Foundation.TimeInterval = 3)
  @objc deinit
}
open class MultipartFormData {
  open var contentType: Swift.String {
    get
    set(value)
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init()
  public func append(_ data: Foundation.Data, withName name: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, mimeType: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: PixelSDK.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@objc open class API : ObjectiveC.NSObject {
  open class var sharedInstance: PixelSDK.API {
    get
  }
  public typealias operationHandler = ((PixelSDK.APIResponseData) -> Swift.Void)?
  @objc deinit
}
@objc open class TaskDelegate : ObjectiveC.NSObject {
  final public let queue: Foundation.OperationQueue
  public var data: Foundation.Data? {
    get
  }
  public var error: Swift.Error?
  @objc override dynamic public init()
  @objc deinit
}
public enum Result<Value> {
  case success(Value)
  case failure(Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension Result : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Result : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension Result {
  public init(value: () throws -> Value)
  public func unwrap() throws -> Value
  public func map<T>(_ transform: (Value) -> T) -> PixelSDK.Result<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> PixelSDK.Result<T>
  public func mapError<T>(_ transform: (Swift.Error) -> T) -> PixelSDK.Result<Value> where T : Swift.Error
  public func flatMapError<T>(_ transform: (Swift.Error) throws -> T) -> PixelSDK.Result<Value> where T : Swift.Error
  @discardableResult
  public func withValue(_ closure: (Value) throws -> Swift.Void) rethrows -> PixelSDK.Result<Value>
  @discardableResult
  public func withError(_ closure: (Swift.Error) throws -> Swift.Void) rethrows -> PixelSDK.Result<Value>
  @discardableResult
  public func ifSuccess(_ closure: () throws -> Swift.Void) rethrows -> PixelSDK.Result<Value>
  @discardableResult
  public func ifFailure(_ closure: () throws -> Swift.Void) rethrows -> PixelSDK.Result<Value>
}
@available(*, deprecated, renamed: "SwiftyJSONError.errorDomain", message: "ErrorDomain is deprecated. Use `SwiftyJSONError.errorDomain` instead.")
public var ErrorDomain: Swift.String
@available(*, deprecated, renamed: "SwiftyJSONError.unsupportedType", message: "ErrorUnsupportedType is deprecated. Use `SwiftyJSONError.unsupportedType` instead.")
public var ErrorUnsupportedType: Swift.Int
@available(*, deprecated, renamed: "SwiftyJSONError.indexOutOfBounds", message: "ErrorIndexOutOfBounds is deprecated. Use `SwiftyJSONError.indexOutOfBounds` instead.")
public var ErrorIndexOutOfBounds: Swift.Int
@available(*, deprecated, renamed: "SwiftyJSONError.wrongType", message: "ErrorWrongType is deprecated. Use `SwiftyJSONError.wrongType` instead.")
public var ErrorWrongType: Swift.Int
@available(*, deprecated, renamed: "SwiftyJSONError.notExist", message: "ErrorNotExist is deprecated. Use `SwiftyJSONError.notExist` instead.")
public var ErrorNotExist: Swift.Int
@available(*, deprecated, renamed: "SwiftyJSONError.invalidJSON", message: "ErrorInvalidJSON is deprecated. Use `SwiftyJSONError.invalidJSON` instead.")
public var ErrorInvalidJSON: Swift.Int
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  @available(*, deprecated, message: "Use instead `init(parseJSON: )`")
  public static func parse(_ json: Swift.String) -> PixelSDK.JSON
  public mutating func merge(with other: PixelSDK.JSON) throws
  public func merged(with other: PixelSDK.JSON) throws -> PixelSDK.JSON
  public var type: PixelSDK.Type {
    get
    }
  public var error: PixelSDK.SwiftyJSONError? {
    get
    }
  public var object: Any {
    get
    set(newValue)
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: PixelSDK.JSON {
    get
  }
  public static var null: PixelSDK.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: PixelSDK.Index<T>, rhs: PixelSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: PixelSDK.Index<T>, rhs: PixelSDK.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = PixelSDK.Index<PixelSDK.JSON>
public typealias JSONRawIndex = PixelSDK.Index<Any>
extension JSON : Swift.Collection {
  public typealias Index = PixelSDK.JSONRawIndex
  public var startIndex: PixelSDK.JSON.Index {
    get
  }
  public var endIndex: PixelSDK.JSON.Index {
    get
  }
  public func index(after i: PixelSDK.JSON.Index) -> PixelSDK.JSON.Index
  public subscript(position: PixelSDK.JSON.Index) -> (Swift.String, PixelSDK.JSON) {
    get
  }
  public typealias Element = (Swift.String, PixelSDK.JSON)
  public typealias Iterator = Swift.IndexingIterator<PixelSDK.JSON>
  public typealias SubSequence = Swift.Slice<PixelSDK.JSON>
  public typealias Indices = Swift.DefaultIndices<PixelSDK.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: PixelSDK.JSONKey { get }
}
extension Int : PixelSDK.JSONSubscriptType {
  public var jsonKey: PixelSDK.JSONKey {
    get
  }
}
extension String : PixelSDK.JSONSubscriptType {
  public var jsonKey: PixelSDK.JSONKey {
    get
  }
}
extension JSON {
  public subscript(path: [PixelSDK.JSONSubscriptType]) -> PixelSDK.JSON {
    get
    set(newValue)
  }
  public subscript(path: PixelSDK.JSONSubscriptType...) -> PixelSDK.JSON {
    get
    set(newValue)
  }
}
extension JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension JSON : Swift.ExpressibleByNilLiteral {
  @available(*, deprecated, message: "use JSON.null instead. Will be removed in future versions")
  public init(nilLiteral: ())
}
extension JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [PixelSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension JSON {
  public var array: [PixelSDK.JSON]? {
    get
  }
  public var arrayValue: [PixelSDK.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set(newValue)
  }
}
extension JSON {
  public var dictionary: [Swift.String : PixelSDK.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : PixelSDK.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set(newValue)
  }
}
extension JSON {
  public var bool: Swift.Bool? {
    get
    set(newValue)
  }
  public var boolValue: Swift.Bool {
    get
    set(newValue)
  }
}
extension JSON {
  public var string: Swift.String? {
    get
    set(newValue)
  }
  public var stringValue: Swift.String {
    get
    set(newValue)
  }
}
extension JSON {
  public var number: Foundation.NSNumber? {
    get
    set(newValue)
  }
  public var numberValue: Foundation.NSNumber {
    get
    set(newValue)
  }
}
extension JSON {
  public var null: Foundation.NSNull? {
    get
    set(newValue)
  }
  public func exists() -> Swift.Bool
}
extension JSON {
  public var url: Foundation.URL? {
    get
    set(newValue)
  }
}
extension JSON {
  public var double: Swift.Double? {
    get
    set(newValue)
  }
  public var doubleValue: Swift.Double {
    get
    set(newValue)
  }
  public var float: Swift.Float? {
    get
    set(newValue)
  }
  public var floatValue: Swift.Float {
    get
    set(newValue)
  }
  public var int: Swift.Int? {
    get
    set(newValue)
  }
  public var intValue: Swift.Int {
    get
    set(newValue)
  }
  public var uInt: Swift.UInt? {
    get
    set(newValue)
  }
  public var uIntValue: Swift.UInt {
    get
    set(newValue)
  }
  public var int8: Swift.Int8? {
    get
    set(newValue)
  }
  public var int8Value: Swift.Int8 {
    get
    set(newValue)
  }
  public var uInt8: Swift.UInt8? {
    get
    set(newValue)
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set(newValue)
  }
  public var int16: Swift.Int16? {
    get
    set(newValue)
  }
  public var int16Value: Swift.Int16 {
    get
    set(newValue)
  }
  public var uInt16: Swift.UInt16? {
    get
    set(newValue)
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set(newValue)
  }
  public var int32: Swift.Int32? {
    get
    set(newValue)
  }
  public var int32Value: Swift.Int32 {
    get
    set(newValue)
  }
  public var uInt32: Swift.UInt32? {
    get
    set(newValue)
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set(newValue)
  }
  public var int64: Swift.Int64? {
    get
    set(newValue)
  }
  public var int64Value: Swift.Int64 {
    get
    set(newValue)
  }
  public var uInt64: Swift.UInt64? {
    get
    set(newValue)
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set(newValue)
  }
}
extension JSON : Swift.Comparable {
}
public func == (lhs: PixelSDK.JSON, rhs: PixelSDK.JSON) -> Swift.Bool
public func <= (lhs: PixelSDK.JSON, rhs: PixelSDK.JSON) -> Swift.Bool
public func >= (lhs: PixelSDK.JSON, rhs: PixelSDK.JSON) -> Swift.Bool
public func > (lhs: PixelSDK.JSON, rhs: PixelSDK.JSON) -> Swift.Bool
public func < (lhs: PixelSDK.JSON, rhs: PixelSDK.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: PixelSDK.writingOptionsKeys, b: PixelSDK.writingOptionsKeys) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum METHOD_TYPE : Swift.Int {
  case GET
  case POST
  case PUT
  case DELETE
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> PixelSDK.Result<Self.SerializedObject> { get }
}
public struct DataResponseSerializer<Value> : PixelSDK.DataResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> PixelSDK.Result<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> PixelSDK.Result<Value>)
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> PixelSDK.Result<Self.SerializedObject> { get }
}
public struct DownloadResponseSerializer<Value> : PixelSDK.DownloadResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> PixelSDK.Result<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> PixelSDK.Result<Value>)
}
extension DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (PixelSDK.DefaultDataResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (PixelSDK.DataResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : PixelSDK.DataResponseSerializerProtocol
}
extension DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (PixelSDK.DefaultDownloadResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (PixelSDK.DownloadResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : PixelSDK.DownloadResponseSerializerProtocol
}
extension Request {
  public static func serializeResponseData(response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> PixelSDK.Result<Foundation.Data>
}
extension DataRequest {
  public static func dataResponseSerializer() -> PixelSDK.DataResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (PixelSDK.DataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension DownloadRequest {
  public static func dataResponseSerializer() -> PixelSDK.DownloadResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (PixelSDK.DownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension Request {
  public static func serializeResponseString(encoding: Swift.String.Encoding?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> PixelSDK.Result<Swift.String>
}
extension DataRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> PixelSDK.DataResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (PixelSDK.DataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension DownloadRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> PixelSDK.DownloadResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (PixelSDK.DownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
extension Request {
  public static func serializeResponseJSON(options: Foundation.JSONSerialization.ReadingOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> PixelSDK.Result<Any>
}
extension DataRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> PixelSDK.DataResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (PixelSDK.DataResponse<Any>) -> Swift.Void) -> Self
}
extension DownloadRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> PixelSDK.DownloadResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (PixelSDK.DownloadResponse<Any>) -> Swift.Void) -> Self
}
extension Request {
  public static func serializeResponsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> PixelSDK.Result<Any>
}
extension DataRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> PixelSDK.DataResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (PixelSDK.DataResponse<Any>) -> Swift.Void) -> Self
}
extension DownloadRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> PixelSDK.DownloadResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (PixelSDK.DownloadResponse<Any>) -> Swift.Void) -> Self
}
@objc open class APINetworkOperation : PixelSDK.HKOperation {
  final public let sessionManger: PixelSDK.SessionManager
  @objc override dynamic open func main()
  @objc override dynamic open func cancel()
  @objc override dynamic public init()
  @objc deinit
}
extension DataRequest {
  public func debugLog() -> Self
  @discardableResult
  public func responseSwiftyJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, _ completionHandler: @escaping (Foundation.URLRequest, Foundation.HTTPURLResponse?, PixelSDK.JSON, Foundation.NSError?) -> Swift.Void) -> Self
}
